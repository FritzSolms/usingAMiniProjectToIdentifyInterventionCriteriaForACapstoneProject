% This file was created with JabRef 2.10.
% Encoding: UTF8


@Article{anisetty_collaborationProblemsInConductingAGroupProjectInASoftwareEngineeringCourse_2011,
  Title                    = {Collaboration Problems in Conducting a Group Project in a Software Engineering Course},
  Author                   = {Anisetty, Priyatham and Young, Paul},
  Journal                  = {J. Comput. Sci. Coll.},
  Year                     = {2011},

  Month                    = may,
  Number                   = {5},
  Pages                    = {45--52},
  Volume                   = {26},

  Acmid                    = {1961586},
  Address                  = {USA},
  File                     = {anisetty_collaborationProblemsInConductingAGroupProjectInASoftwareEngineeringCourse_2011.pdf:anisetty_collaborationProblemsInConductingAGroupProjectInASoftwareEngineeringCourse_2011.pdf:PDF},
  ISSN                     = {1937-4771},
  Issue_date               = {May 2011},
  Numpages                 = {8},
  Publisher                = {Consortium for Computing Sciences in Colleges},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=1961574.1961586}
}

@InProceedings{basholli_fairAssessmentInSoftwareEngineeringCapstoneProjects_2013,
  Title                    = {Fair Assessment in Software Engineering Capstone Projects},
  Author                   = {Basholli, Adelina and Baxhaku, Fesal and Dranidis, Dimitris and Hatziapostolou, Thanos},
  Booktitle                = {Proceedings of the 6th Balkan Conference in Informatics},
  Year                     = {2013},

  Address                  = {New York, NY, USA},
  Pages                    = {244--250},
  Publisher                = {ACM},
  Series                   = {BCI '13},

  Abstract                 = {Providing undergraduate and postgraduate Computer Science students with valuable practical, real-life experiences during Software Engineering courses is considered a necessity. These experiences should integrate theoretical knowledge with practical skills in order to enhance employability skills and prepare students for the industry. A common practice in order to achieve this goal is having students work in groups in Software Engineering Capstone projects. Despite the numerous benefits, however, capstone projects impose a number of challenges for educators. One of them is the fair assessment of students within a group. This paper presents an assessment scheme that takes into consideration both the individual effort that a student places in a groupwork capstone project, as well as, the value of the effort as perceived by teammates via peer assessment. The assessment scheme and the utilized peer assessment form are validated through questionnaires. Students' perceptions concerning their experiences in past projects as well as their opinions about the specific assessment scheme are gathered and analyzed. The results are encouraging and provide an indication that the proposed assessment method which integrates peer assessment promotes a more fair assessment for Software Engineering Capstone projects.},
  Acmid                    = {2490268},
  Doi                      = {10.1145/2490257.2490268},
  File                     = {basholli_fairAssessmentInSoftwareEngineeringCapstoneProjects_2013.pdf:basholli_fairAssessmentInSoftwareEngineeringCapstoneProjects_2013.pdf:PDF},
  ISBN                     = {978-1-4503-1851-8},
  Keywords                 = {capstone projects, peer assessment, software engineering education},
  Location                 = {Thessaloniki, Greece},
  Numpages                 = {7},
  Url                      = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/2490257.2490268}
}

@InProceedings{bavota_teaching_Software_EngineeringAnd_Software_Project_Management_2012,
  Title                    = {Teaching Software Engineering and Software Project Management: An Integrated and Practical Approach},
  Author                   = {Bavota, Gabriele and De Lucia, Andrea and Fasano, Fausto and Oliveto, Rocco and Zottoli, Carlo},
  Booktitle                = {Proceedings of the 2012 International Conference on Software Engineering},
  Year                     = {2012},

  Address                  = {Piscataway, NJ, USA},
  Pages                    = {1155--1164},
  Publisher                = {IEEE Press},
  Series                   = {ICSE 2012},

  Acmid                    = {2337375},
  ISBN                     = {978-1-4673-1067-3},
  Location                 = {Zurich, Switzerland},
  Numpages                 = {10},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=2337223.2337375}
}

@InProceedings{bolinger_fromStudentToTeacher_2010,
  Title                    = {From Student to Teacher: Transforming Industry Sponsored Student Projects into Relevant, Engaging, and Practical Curricular Materials},
  Author                   = {Bolinger, J. and Yackovich, K. and Ramnath, R. and Ramanathan, J. and Soundarajan, N.},
  Booktitle                = {Transforming Engineering Education: Creating Interdisciplinary Skills for Complex Global Environments, 2010 IEEE},
  Year                     = {2010},
  Month                    = {April},
  Pages                    = {1-21},

  Abstract                 = {Over the past several years we have collaborated with a variety of industrial partners to carry out applied research and capstone design projects in cooperation with our students. Although the projects have varied widely, more often than not, success or failure lies within the students' ability to see beyond the technical challenges into the subtleties of the business and the meaning of value. Looking back at our traditional software engineering curriculum it is not so surprising that gaps in technical skills are not typically the source of problems. With a strong traditional focus on the construction of software, we have been producing graduates who can build relatively complex stand-alone systems. Unfortunately, in today's world, being able to build software is only a small, albeit necessary, skill for software engineers and it is miles away from being sufficient. The challenges inherent in providing a portfolio of innovative, integrated, and strategic IT services are well beyond any of the techniques or conceptual frameworks historically taught in many software engineering curriculums, including our own. To address these shortcomings we have recently begun experimenting with a new curriculum that presents software engineering in its larger context as a strategic business function. We are also beginning to stress the importance of using a set of analytic frameworks to guide the evolution and development of software systems starting with the business and its context, through the architecture and design stages, and finally into implementation and support. To create materials for this curriculum we have gone back to the original voice of the problem and are attempting to assemble learning materials from the projects that industry has championed for us in the past. Our goal is not merely to showcase the software that was built, but rather to expose the reasons behind their conception and the frameworks used to make critical decisions throughout the process.},
  Doi                      = {10.1109/TEE.2010.5508872},
  File                     = {bolinger_fromStudentToTeacher_2010.pdf:bolinger_fromStudentToTeacher_2010.pdf:PDF},
  Keywords                 = {computer science education;decision making;educational courses;engineering education;software engineering;design projects;industry sponsored student projects;software construction;software engineering curriculum;software engineers;software systems development;stand-alone systems;strategic IT services;strategic business function;student ability;technical skills;Acoustic materials;Acoustical engineering;Collaboration;Computer industry;Computer science;Design engineering;Portfolios;Software engineering;Software systems;Stress}
}

@InProceedings{clark_selfAndPeerAssessmentInSoftwareEngineeringProjects_2005,
  Title                    = {Self and Peer Assessment in Software Engineering Projects},
  Author                   = {Clark, Nicole and Davies, Pamela and Skeers, Rebecca},
  Booktitle                = {Proceedings of the 7th Australasian Conference on Computing Education - Volume 42},
  Year                     = {2005},

  Address                  = {Darlinghurst, Australia, Australia},
  Pages                    = {91--100},
  Publisher                = {Australian Computer Society, Inc.},
  Series                   = {ACE '05},

  Abstract                 = {Team software engineering projects can enhance student learning and commitment, but it is challenging to determine a method of assessment that assesses the intended learning outcomes; particularly when assessing teamwork and an individual's contribution to the team's work. The students themselves are often the best source of meaningful data, and self and peer assessment is a valuable part of the whole assessment scheme. To ensure the integrity of the final grade it is necessary to use a variety of tools and to check the correlation between data from different sources. To increase the learning opportunities it is useful to repeat some assessment tasks during the course. However, this can be time-consuming for the lecturer to collate and analyse, and providing timely feedback to the students is difficult. Web-based peer assessment offers an opportunity to provide quality, timely feedback in a way that is manageable by the lecturer.},
  Acmid                    = {1082436},
  File                     = {clark_selfAndPeerAssessmentInSoftwareEngineeringProjects_2005.pdf:clark_selfAndPeerAssessmentInSoftwareEngineeringProjects_2005.pdf:PDF},
  ISBN                     = {1-920682-24-4},
  Keywords                 = {education, peer assessment, software engineering},
  Location                 = {Newcastle, New South Wales, Australia},
  Numpages                 = {10},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=1082424.1082436}
}

@InProceedings{collofello_monitoringTeamProgressInASoftwareEngineeringProjectClass_1999,
  Title                    = {Monitoring team progress in a software engineering project class},
  Author                   = {Collofello, J.S. and Hart, M.},
  Booktitle                = {Frontiers in Education Conference, 1999. FIE '99. 29th Annual},
  Year                     = {1999},
  Month                    = {Nov},
  Pages                    = {11B4/7-11B410 vol.1},
  Volume                   = {1},

  Abstract                 = {One of the most challenging tasks of teaching an undergraduate software engineering team project course is monitoring the progress of individual teams. At Arizona State University (USA), their undergraduate software engineering class is routinely taught with 50 students broken into 10 software development teams. The teams work on a realistic project for 15 weeks beginning with the development of a requirements document and ending with acceptance testing of a fully documented product. The challenge for the instructor is to monitor the progress of each of the teams as well as their individual members. Ideally metrics should also be gathered providing both the instructor and individual teams with quantitative comparative information. To facilitate the monitoring of project teams, the authors have developed a system that has evolved over the last 10 years. The system consists of individual weekly progress reports, team meeting reports, frequent incremental deliverables from both individuals and teams and metrics. The metrics provide information on both individuals and teams. This paper describes in detail their monitoring system and provides examples of actual metrics collected from their courses. In addition, they describe and make available software for automating the monitoring process. This software provides an easy interface for both individuals and teams to enter timely information necessary for instructor monitoring. It provides the instructor with excellent visibility of team activities. It also enables teams to compare their metrics with that of other teams in an anonymous fashion. For example, a team might compare the time they have spent in meetings with that of other teams.},
  Doi                      = {10.1109/FIE.1999.839226},
  File                     = {collofello_monitoringTeamProgressInASoftwareEngineeringProjectClass_1999.pdf:collofello_monitoringTeamProgressInASoftwareEngineeringProjectClass_1999.pdf:PDF},
  ISSN                     = {0190-5848},
  Keywords                 = {computer science education;educational courses;software development management;teaching;USA;fully documented product;software development teams;software engineering project class;students;team progress monitoring;undergraduate computer science course;Application software;Communication system control;Computer science;Computerized monitoring;Costs;Education;Information systems;Meeting planning;Software engineering;Statistics}
}

@InProceedings{desai_aNovelAproachToCarryingOutMiniProjectInComputerScienceAndEngineering_2012,
  Title                    = {A novel approach to carrying out mini project in Computer Science amp; Engineering},
  Author                   = {Desai, P. and Joshi, G. H. and Vijayalaskhmi, M.},
  Booktitle                = {Engineering Education: Innovative Practices and Future Trends (AICERA), 2012 IEEE International Conference on},
  Year                     = {2012},
  Month                    = {July},
  Pages                    = {1-4},

  Abstract                 = {The student projects done in Computer Science and Engineering suffers from the following problems: poorly managed requirements, poor or no design and poor or no testing. Students generally tend to focus more on coding phase of the project, since the misconception is that a large code constitutes good software. Unlike other branches of engineering, the engineering processes are not visible here. Further, management of large number of student projects poses a challenge in terms of guidance, progress monitoring and assessment. The student projects are observed to be ending up incomplete and are rarely deployed. The feedback from industry side also speaks about the gaps in terms of these skills. A mini project course for fifth semester is designed in the undergraduate programme in Computer Science and Engineering to address the lacunae observed above by tightly integrating it with the theory course on Software engineering. The focus of the mini project is not on what the problem definition is, instead it is on how it is done. The implementation plan addressed the issues and challenges listed above faced by the faculty. Assessment rubrics are written to guarantee proper understanding of the expectations among the stake holders resulting in fair assessment. This approach improved students understandability in Software engineering concepts and also the quality of their capstone projects. The paper discusses the design, implementation and assessment details of mini project along with the experience gained.},
  Doi                      = {10.1109/AICERA.2012.6306699},
  File                     = {desai_aNovelAproachToCarryingOutMiniProjectInComputerScienceAndEngineering_2012.pdf:desai_aNovelAproachToCarryingOutMiniProjectInComputerScienceAndEngineering_2012.pdf:PDF},
  Keywords                 = {computer aided instruction;computer science education;software engineering;coding phase;computer science & engineering;engineering processes;mini project;mini project course;software engineering;student projects;undergraduate programme;Computer science;Educational institutions;Industries;Software;Software engineering;Testing;Assessment;Learning Objectives;Mini project;Skills;Software engineering}
}

@InProceedings{vanDerDuim_goodPracticesForEducationalSoftwareEngineeringProjects_2007,
  Title                    = {Good Practices for Educational Software Engineering Projects},
  Author                   = {van der Duim, L. and Andersson, J.},
  Booktitle                = {Software Engineering, 2007. ICSE 2007. 29th International Conference on},
  Year                     = {2007},
  Month                    = {May},
  Pages                    = {698-707},

  Abstract                 = {Recent publications indicate the importance of software engineering in the computer science curriculum. In this paper, we present the final part of software engineering education at University of Groningen in the Netherlands and Vaxjo University in Sweden, where student teams perform an industrial software development project. It furthermore presents the main educational problems encountered in such real-life projects and explains how this international course addresses these problems. The main contribution of this paper is a set of seven good practices for project based software engineering education.},
  Doi                      = {10.1109/ICSE.2007.40},
  File                     = {vanDerDuim_goodPracticesForEducationalSoftwareEngineeringProjects_2007.pdf:vanDerDuim_goodPracticesForEducationalSoftwareEngineeringProjects_2007.pdf:PDF},
  ISSN                     = {0270-5257},
  Keywords                 = {computer science education;software engineering;University of Groningen;Vaxjo University;computer science curriculum;educational software engineering projects;industrial software development project;Computer industry;Computer science;Computer science education;Programming;Project management;Sequential analysis;Software engineering;Software maintenance;Software quality;Uncertainty}
}

@Article{garratt_teachingSoftwareEngineeringAtUniversity_1988,
  Title                    = {Teaching software engineering at university },
  Author                   = {PW Garratt and G Edmunds},
  Journal                  = {Information and Software Technology },
  Year                     = {1988},
  Number                   = {1},
  Pages                    = {5 - 11},
  Volume                   = {30},

  Doi                      = {http://dx.doi.org/10.1016/0950-5849(88)90100-0},
  ISSN                     = {0950-5849},
  Keywords                 = {software engineering},
  Url                      = {http://www.sciencedirect.com/science/article/pii/0950584988901000}
}

@InProceedings{hayes_evaluatingIndividualContributionTowardGroupSoftwareEngineeringProjects_2003,
  Title                    = {Evaluating Individual Contribution Toward Group Software Engineering Projects},
  Author                   = {Hayes, Jane Huffman and Lethbridge, Timothy C. and Port, Daniel},
  Booktitle                = {Proceedings of the 25th International Conference on Software Engineering},
  Year                     = {2003},

  Address                  = {Washington, DC, USA},
  Pages                    = {622--627},
  Publisher                = {IEEE Computer Society},
  Series                   = {ICSE '03},

  Abstract                 = {It is widely acknowledged that group or team projects are a staple of undergraduate and graduate software engineering courses. Such projects provide students with experiences that better prepare them for their careers, so teamwork is often required or strongly encouraged by accreditation agencies. While there are a multitude of educational benefits of group projects, they also pose considerable challenge in fairly and accurately discerning individual contribution for evaluation purposes. Issues, approaches, and best practices for evaluating individual contribution are presented from the perspectives of the University of Kentucky, University of Ottawa, University of Southern California, and others.The techniques utilized within a particular course generally are a mix of (1) the group mark is everybody's mark, (2) everybody reports what they personally did, (3) other group members report the relative contributions of other group members, (4) pop quizzes on project details, and (5) cross-validating with the results of individual work.},
  Acmid                    = {776903},
  File                     = {hayes_evaluatingIndividualContributionTowardGroupSoftwareEngineeringProjects_2003.pdf:hayes_evaluatingIndividualContributionTowardGroupSoftwareEngineeringProjects_2003.pdf:PDF},
  ISBN                     = {0-7695-1877-X},
  Location                 = {Portland, Oregon},
  Numpages                 = {6},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=776816.776903}
}

@Article{isaacson_aMiniSoftwareEngineeringProjectForCs0_2003,
  Title                    = {A Mini Software Engineering Project for CS0},
  Author                   = {Isaacson, Peter C.},
  Journal                  = {J. Comput. Sci. Coll.},
  Year                     = {2003},

  Month                    = oct,
  Number                   = {1},
  Pages                    = {169--178},
  Volume                   = {19},

  Abstract                 = {In an attempt to provide a better breadth-first Introduction to Computer Science, a mini software engineering project was added to the CS0-like course at the University of Northern Colorado during the fall of 2002. This introductory course is taken by prospective Computer Science students as well as those students in other majors. This paper will describe the project and enough of the course to provide an understanding of how previous assignments lead up to the final assignment/project. Finally, comments on the project attempt and suggestions for future attempts will be provided.},
  Acmid                    = {948762},
  Address                  = {USA},
  File                     = {isaacson_aMiniSoftwareEngineeringProjectForCs0_2003.pdf:isaacson_aMiniSoftwareEngineeringProjectForCs0_2003.pdf:PDF},
  ISSN                     = {1937-4771},
  Issue_date               = {October 2003},
  Numpages                 = {10},
  Publisher                = {Consortium for Computing Sciences in Colleges},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=948737.948762}
}

@Article{madsen_failingToLearn_2010,
  Title                    = {Failing to learn? The effects of failure and success on organizational learning in the global orbital launch vehicle industry.},
  Author                   = {Madsen, D.M. and Desai, V.M.},
  Journal                  = {Academy of Management Journal},
  Year                     = {2010},
  Pages                    = {451-476},
  Volume                   = {52},

  Abstract                 = {It is unclear whether the common finding of improved organizational performance with increasing organizational experience is driven by learning from success, learning from failure, or some combination of the two. We disaggregate these types of experience and address their relative (and interactive) effects on organizational performance in the orbital launch vehicle industry. We find that organizations learn more effectively from failures than successes, that knowledge from failure depreciates more slowly than knowledge from success, and that prior stocks of experience and the magnitude of failure influence how effectively organizations can learn from various forms of experience.},
  Owner                    = {fritz},
  Timestamp                = {2014.02.24}
}

@InProceedings{nordio_teachingSoftwareEngineeringUsingGloballyDistributedProjects_2011,
  Title                    = {Teaching Software Engineering Using Globally Distributed Projects: The DOSE Course},
  Author                   = {Nordio, Martin and Ghezzi, Carlo and Meyer, Bertrand and Di Nitto, Elisabetta and Tamburrelli, Giordano and Tschannen, Julian and Aguirre, Nazareno and Kulkarni, Vidya},
  Booktitle                = {Proceedings of the 2011 Community Building Workshop on Collaborative Teaching of Globally Distributed Software Development},
  Year                     = {2011},

  Address                  = {New York, NY, USA},
  Pages                    = {36--40},
  Publisher                = {ACM},
  Series                   = {CTGDSD '11},

  Acmid                    = {1984673},
  Doi                      = {10.1145/1984665.1984673},
  File                     = {nordio_teachingSoftwareEngineeringUsingGloballyDistributedProjects_2011.pdf:nordio_teachingSoftwareEngineeringUsingGloballyDistributedProjects_2011.pdf:PDF},
  ISBN                     = {978-1-4503-0590-7},
  Keywords                 = {distributed software engineering, multinational project},
  Location                 = {Waikiki, Honolulu, HI, USA},
  Numpages                 = {5},
  Url                      = {http://0-doi.acm.org.innopac.up.ac.za/10.1145/1984665.1984673}
}

@InProceedings{oudshoorn_ExperienceWithAProjectBasedApproachToTeachingSoftwareEngineering_1994,
  Title                    = {Experience with a project-based approach to teaching software engineering},
  Author                   = {Oudshoorn, M.J. and Maciunas, K.J.},
  Booktitle                = {Software Education Conference, 1994. Proceedings.},
  Year                     = {1994},
  Month                    = {Nov},
  Pages                    = {220-225},

  Abstract                 = {The paper reviews the experiences of teaching software engineering at the University of Adelaide using a group-based project over the course of one semester (15 weeks). Students are required to design, prototype, implement, maintain and document the software to satisfy the requirements defined by the lecturing staff who endeavour to simulate a customer as closely as possible. The paper focuses on the project and the benefits it offers rather than the content of the lectures},
  Doi                      = {10.1109/SEDC.1994.475339},
  File                     = {oudshoorn_ExperienceWithAProjectBasedApproachToTeachingSoftwareEngineering_1994.pdf:oudshoorn_ExperienceWithAProjectBasedApproachToTeachingSoftwareEngineering_1994.pdf:PDF},
  Keywords                 = {computer science education;educational courses;software engineering;software maintenance;software prototyping;system documentation;teaching;Adelaide University;customer simulation;group-based project;lecturing staff;project-based approach;requirements;semester;software design;software documentation;software engineering teaching;software implementation;software maintenance;software prototyping;Atmosphere;Computational modeling;Computer science;Documentation;Education;Feedback;Software engineering;Software prototyping;Software systems;Virtual prototyping}
}

@InProceedings{peixoto_learningFromStudentsMistakesInSoftwareEngineeringCourses_2010,
  Title                    = {Learning from students' mistakes in Software Engineering courses},
  Author                   = {Peixoto, D.C.C. and Batista, V.A. and Resende, R.F. and Pádua, C.I.P.S.},
  Booktitle                = {Frontiers in Education Conference (FIE), 2010 IEEE},
  Year                     = {2010},
  Month                    = {Oct},
  Pages                    = {F1J-1-F1J-6},

  Abstract                 = {An important component of most Software Engineering courses is the software development team project. For most Software Engineering courses, the software development project provides to undergraduate students their best opportunity to learn about the "real-world" of software development, including team work, understanding client's requirements, quality assurance, project management, and so on. The software development project in an undergraduate environment provides several benefits, but it also poses considerable challenge in fairly and accurately evaluating its results and applying the lessons learned in its improvement. In this article, we discuss issues and practices for improving the team project from the perspective of an introductory Software Engineering course at Federal University of Minas Gerais, Brazil. We provide a contextualized evaluation, based on artifact defects produced by students. Ours results reinforces the belief that an understanding of cause-effect defects relationships offers a simple and low-cost method for improving the Software Engineering course and team project.},
  Doi                      = {10.1109/FIE.2010.5673588},
  File                     = {peixoto_learningFromStudentsMistakesInSoftwareEngineeringCourses_2010.pdf:peixoto_learningFromStudentsMistakesInSoftwareEngineeringCourses_2010.pdf:PDF},
  ISSN                     = {0190-5848},
  Keywords                 = {computer science education;project management;quality assurance;software engineering;software quality;project management;quality assurance;software development team project;software engineering courses;team work;Inspection;Programming;Software;Software engineering;Training;Unified modeling language;Defects;Quality audit;Software Engineering course;Team project}
}

@InProceedings{roach_retrospectivesInASoftwareEngineeringProjectCourse_2011,
  Title                    = {Retrospectives in a software engineering project course: Getting students to get the most from a project experience},
  Author                   = {Roach, S.},
  Booktitle                = {Software Engineering Education and Training (CSEE T), 2011 24th IEEE-CS Conference on},
  Year                     = {2011},
  Month                    = {May},
  Pages                    = {467-471},

  Abstract                 = {Project retrospectives are an established “best practice” in software process improvement. As a tool for learning how to perform better as a development organization, retrospectives may provide an additional learning opportunity for students in software engineering project courses. This paper describes a project retrospective approach that has been adapted to the academic setting. Academic project retrospectives not only provide students with the opportunity to reflect on their project performance, it gives the instructor additional information on improving the delivery, management, and learning outcomes. Key elements and suggestions f or improvements of the retrospective are described.},
  Doi                      = {10.1109/CSEET.2011.5876126},
  ISSN                     = {1093-0175},
  Keywords                 = {computer aided instruction;computer science education;educational courses;software engineering;project experience;project retrospectives;software engineering project course;software process improvement;Computer science;Databases;Prototypes;Psychology;Safety;Software;Software engineering}
}

@Article{stamelos_softwareProjectManagementAntiPatterns_2010,
  Title                    = {Software project management anti-patterns },
  Author                   = {Ioannis Stamelos},
  Journal                  = {Journal of Systems and Software },
  Year                     = {2010},
  Note                     = {SI: Top Scholars },
  Number                   = {1},
  Pages                    = {52 - 59},
  Volume                   = {83},

  Doi                      = {http://dx.doi.org/10.1016/j.jss.2009.09.016},
  File                     = {stamelos_softwareProjectManagementAntiPatterns_2010.pdf:stamelos_softwareProjectManagementAntiPatterns_2010.pdf:PDF},
  ISSN                     = {0164-1212},
  Keywords                 = {Anti-pattern},
  Url                      = {http://www.sciencedirect.com/science/article/pii/S0164121209002325}
}

@Article{stein_usingLargeVsSmallGroupProjectsInCapstoneAndSoftwareEngineeringCourses_2002,
  Title                    = {Using Large vs. Small Group Projects in Capstone and Software Engineering Courses},
  Author                   = {Stein, Michael V.},
  Journal                  = {J. Comput. Sci. Coll.},
  Year                     = {2002},

  Month                    = mar,
  Number                   = {4},
  Pages                    = {1--6},
  Volume                   = {17},

  Abstract                 = {Teamwork is viewed as an increasingly important facet of an education in Computer Science and related fields. One common way to include teamwork in the undergraduate curriculum is to include team projects in various course offerings. I have taught both large-group and small-group projects in upper-division undergraduate courses within the recent past. This paper compares these experiences from my viewpoint as an instructor, and identifies the factors that I have found most indicative of quality projects in both types of courses.},
  Acmid                    = {774291},
  Address                  = {USA},
  File                     = {stein_usingLargeVsSmallGroupProjectsInCapstoneAndSoftwareEngineeringCourses_2002.pdf:stein_usingLargeVsSmallGroupProjectsInCapstoneAndSoftwareEngineeringCourses_2002.pdf:PDF},
  ISSN                     = {1937-4771},
  Issue_date               = {March 2002},
  Numpages                 = {6},
  Publisher                = {Consortium for Computing Sciences in Colleges},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=774288.774291}
}

@Article{stiller_effectiveSoftwareEngineeringPedagogy_2002,
  Title                    = {Effective Software Engineering Pedagogy},
  Author                   = {Stiller, Evelyn and LeBlanc, Cathie},
  Journal                  = {J. Comput. Sci. Coll.},
  Year                     = {2002},

  Month                    = may,
  Number                   = {6},
  Pages                    = {124--134},
  Volume                   = {17},

  Acmid                    = {775766},
  Address                  = {USA},
  File                     = {stiller_effectiveSoftwareEngineeringPedagogy_2002.pdf:stiller_effectiveSoftwareEngineeringPedagogy_2002.pdf:PDF},
  ISSN                     = {1937-4771},
  Issue_date               = {May 2002},
  Numpages                 = {11},
  Publisher                = {Consortium for Computing Sciences in Colleges},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=775742.775766}
}

@Article{tadayon_softwareEngineeringBasedOnTheTeamSoftwareProcessWithARealWorldProject_2004,
  Title                    = {Software Engineering Based on the Team Software Process with a Real World Project},
  Author                   = {Tadayon, Nasser},
  Journal                  = {J. Comput. Sci. Coll.},
  Year                     = {2004},

  Month                    = apr,
  Number                   = {4},
  Pages                    = {133--142},
  Volume                   = {19},

  Acmid                    = {1050248},
  Address                  = {USA},
  File                     = {tadayon_softwareEngineeringBasedOnTheTeamSoftwareProcessWithARealWorldProject_2004.pdf:tadayon_softwareEngineeringBasedOnTheTeamSoftwareProcessWithARealWorldProject_2004.pdf:PDF},
  ISSN                     = {1937-4771},
  Issue_date               = {April 2004},
  Keywords                 = {TSP, curriculum, real world project, software engineering},
  Numpages                 = {10},
  Publisher                = {Consortium for Computing Sciences in Colleges},
  Url                      = {http://0-dl.acm.org.innopac.up.ac.za/citation.cfm?id=1050231.1050248}
}

@InProceedings{varol_appliedSoftwareEngineeringEducation_2005,
  Title                    = {Applied software engineering education},
  Author                   = {Varol, C. and Bayrak, C.},
  Booktitle                = {Information Technology Based Higher Education and Training, 2005. ITHET 2005. 6th International Conference on},
  Year                     = {2005},
  Month                    = {July},
  Pages                    = {T3C/25-T3C/29},

  Abstract                 = {If we are to consider evaluating the available workforce under the spectrums of time, cost, and reliability, the theoretical teaching of software engineering fundamentals is not sufficient to provide the skills and knowledge expectations of the employers. Besides the specialized knowledge, the non-technical skills such as the communication ability within the group for partitioning, assigning, and monitoring task progress are required as part of the background. However, these skills are generally omitted while teaching software engineering due to lack of time, environment, and/or resources. Since traditional lectures are lacking of practical ways of creating software, the focus of this research is to present our experiments during a client-sponsored project in an applied classroom environment at the University of Arkansas at Little Rock (UALR). Our goal is to provide not only the differences between the theoretical and practical education, but also the impact of a real client and the vital considerations and conditions taken by the development team in order to prevent failure in the project are expressed. Finally, to measure the outcome of the applied teaching and conduct future enhancements, a pre and post-knowledge assessment were conducted.},
  Doi                      = {10.1109/ITHET.2005.1560250},
  File                     = {varol_appliedSoftwareEngineeringEducation_2005.pdf:varol_appliedSoftwareEngineeringEducation_2005.pdf:PDF},
  Keywords                 = {computer science education;software engineering;applied classroom environment;knowledge assessment;software engineering education;software management;software requirements;Costs;Educational institutions;Educational technology;Engineering management;Monitoring;Project management;Reliability theory;Software engineering;Systems engineering education;Technology management;Client-Sponsored Project;Focus Group;Software Engineering Education;Software Management;Software Requirements}
}

@InProceedings{yu_failureCaseStudy_anInstructuiveMethodForTeachingComputerNetworkEngineering_2010,
  Title                    = {Failure case study: An instructive method for teaching computer network engineering},
  Author                   = {Liyang Yu and Wei Zhang},
  Booktitle                = {Computer Science and Education (ICCSE), 2010 5th International Conference on},
  Year                     = {2010},
  Month                    = {Aug},
  Pages                    = {296-299},

  Abstract                 = {The computer network engineering course, one of essential and popular courses to train the network engineer, requires students to master comprehensive theories on network engineering and experienced practice skills. In this paper, we propose the failure case study method for teaching the computer network engineering course. The applications of the failure case study method are presented with six examples both in the classroom and in the laboratory. Our teaching experiences for more than ten years show that the failure case study method is an instructive and effective teaching method for the computer network engineering course.},
  Doi                      = {10.1109/ICCSE.2010.5593630},
  File                     = {yu_failureCaseStudy_anInstructuiveMethodForTeachingComputerNetworkEngineering_2010.pdf:yu_failureCaseStudy_anInstructuiveMethodForTeachingComputerNetworkEngineering_2010.pdf:PDF},
  Keywords                 = {computer networks;computer science education;educational courses;engineering education;teaching;computer network engineering course;computer network engineering teaching;failure case study method;practice skill;Computers;Education;IP networks;Laboratories;Protocols;Servers;computer network engineering;failure case;practice skill;teaching method}
}

@comment{jabref-meta: selector_keywords:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

